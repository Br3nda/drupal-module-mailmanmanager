<?php

/**
 * @file
 * Allows users to subscribe to Mailman mailing lists via a form in
 * their user profile.  List of mailing lists is defined by adminstrator.
 * Module maintains a list of user subscriptions and passwords.
 * Module sends requests for subscription changes to Mailman request address.
 */

/**
 * Implementation of hook_help().
 */
function mailman_manager_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Utilities related to Mailman manager, subscription system and database for Mailman mailing lists.');
      break;
    case 'admin/help#mailman_manager':
      return '<p>'. t('Utilities related to Mailman manager, subscription system and database for Mailman mailing lists.').'</p>'.'<p>'. t('This tool works using the mailman email interface. All commands sent by this module are also BCC\'ed to the list admin. One can optionally specify the web interface and/or the web archive of each list. The module can not know if a user is previously subscribed but allows the user to specify a password which can then be used to hook into an existing account. This module currently only works with Drupal MySQL installations.').'</p>';
      break;
  }
}

/**
 * Implementation of hook_link().
 */
function mailman_manager_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();

  if ($type == 'page' && user_access('access content')) {
//    $links[] = l(t('mailing %list', array('%list' => format_plural(_mailman_manager_get_count(), 'list', 'lists'))), 'mailman_manager', array('title' => t('Subscribe to mailing %list', array('%list' => format_plural(_mailman_manager_get_count(), 'list', 'lists')))));
    $links[] = l(t('mailing lists'), 'mailman_manager', array('title' => t('Subscribe to mailing lists')));
  }

  return $links;
}

/**
 * Implementation of hook_perm().
 */
function mailman_manager_perm() {
  return array('access mailman_manager', 'administer mailman_manager');
}

/**
 * Implementation of hook_menu().
 */
function mailman_manager_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'mailman_manager',
      'title' => ('mailing lists'),
      'callback' => 'mailman_manager_page',
      'access' => user_access('access mailman_manager'),
      'type' => MENU_NORMAL_ITEM);

    $items[] = array('path' => 'admin/mailman_manager',
      'title' => t('mailing lists'),
      'access' => user_access('administer mailman_manager'),
      'callback' => 'mailman_manager_admin',
      'type' => MENU_NORMAL_ITEM);
  }
  return $items;
}

/**
 * Menu callback; Forwards request to hook_user;
 */
function mailman_manager_page() {
  global $user;
  if (!user_access('access mailman_manager')) {
    print theme('page', 'You must be an authorized member to subscribe to mailing lists');
  }
  else {
    drupal_goto('user/'.$user->uid.'/edit/mailman_manager');
  }
}

/**
* Implementation of hook_user()
* Checks whether an email address is subscribed to the mailinglist
* when a new user signs up. If so, changes uid from 0 to the new uid
* in sn_subscriptions so that the user's subscription status is known
* when he logs in.
*/
function mailman_manager_user($op, &$edit, &$account, $category=NULL) {
  switch ($op) {
  //Create menu option on user tab;
    case 'categories':
      $output_user[] = array('name' => 'mailman_manager', 'title' => t('mailing lists'), 'weight' => 9);
    return $output_user;
    break;

  //List mailing lists with user subscriptions and options;
    case 'form':
    if ($category=='mailman_manager' && user_access('access mailman_manager')){
    $output = '<div class="mailman_manager">';
    $output .='<p>'.t('The following email address will be subscribed to the email lists:');
    $output .='<br><strong>'.$account->mail.'</strong>';
    $output .=t('<p>If you would like to have a different email address subscribed, change your email address in the account settings tab.');
    $lists = _mailman_manager_get_lists();

    $form['mman'] = array( '#type' => 'markup', '#value' => $output );
    if (count($lists) == 0) {
      $output = t('There are no lists available for subscription.');
    } else {
		$status = 0;
		foreach ( $lists as $list){
            $form['mman']['list'.trim($list[lid])] = array(
                                                   '#type' => 'fieldset',
                                                   '#title' => $list['name'], 
                                                   '#collapsible' => TRUE
                                   );

	        $subscrip=_mailman_manager_get_subscriptions($account->uid,$list[lid]);
			if ($subscrip['lstatus'] == 0) {
				$options = array('2' => t('Subscribe for digest (receive emails in a bundle)'),
                                 '3' => t('Subscribe for all Mail (normal delivery)'));
				$status++;
			} else {
				$options = array('0' => t('Unsubscribe'),
                                 '1' => t('No mail (temporarily disable delivery)'),
                                 '2' => t('Subscribe for digest (receive emails in a bundle)'),
                                 '3' => t('Subscribe for all Mail (normal delivery)'),
                                 '4' => t('Mail password'));
			}
        	$subscrip=_mailman_manager_get_subscriptions($account->uid,$list[lid]);
			$form['mman']['list'.trim($list[lid])]['options'.trim($list[lid])] = array (
				'#type' => 'radios',
				'#title' => t('Change your subscription:'),
				'#options' => $options,
				'#default_value' => $subscrip['lstatus']
			);
			if ($subscrip['lstatus'] == 0) {
            $form['mman']['list'.trim($list[lid])]['pass'.trim($list[lid])] = array('#type' => 'textfield',
                                                              '#title' => t('Password for '.$list['name'].' (optional)'),
                                                              '#size' => 15,
                                                              '#required' => FALSE,
                                                              '#default_value' => $subscrip['lpass']
                                                              );
            }
            if ( $list[web] || $list[webarch] ) {
                $link_output = t('Visit: ');
                if ( $list[web] ) {
                    $link_output .= l(t('Mailman Interface'), $list[web]);
                }
                if ( $list[web] && $list[webarch] )
                    $link_output .= ' or: ';
                if ( $list[webarch] ) {
                    $link_output .= l( $list['name'] . t(' archive'), $list[webarch]);
                }
                $form['mman']['list'.trim($list[lid])]['links'] = array( '#type' => 'markup', '#value' => $link_output );
            }
		}
	}
	if ($status != 0){
		$output2 = '<p>'.t('Your current email address is not subscribed to ').$status.t(' list(s)!<p>');
	} else {
		$output2 = '<p>'.t('Your current email address is currently subscribed to all lists.<p>');
    }
	$output2 .= '</div>';
	$form['lists']['subinfo'] = array( '#type' => 'markup', '#value' => $output2 );
	$form['lists']['oldemail'] = array(
		'#type' => 'hidden',
		'#default_value' => $subscrip[lmail]
	);
	$form['lists']['newemail'] = array(
		'#type' => 'hidden',
		'#default_value' =>	$account->mail
	);
	return $form;
    break;
	}
	
  //Update and process list subscriptions;
    case 'update':
    if ($category=='mailman_manager'){
      $lists = _mailman_manager_get_lists();
      foreach ($lists as $list) {
	    $subscrip=_mailman_manager_get_subscriptions($account->uid,$list[lid]);
	    $listno='options'.trim($list[lid]);
        $query = "SELECT * FROM {mailman_users} WHERE uid = %d AND lid = %d";
        $result = db_query($query,$account->uid,$list[lid]);
        $subscrip = db_fetch_array($result);
        if ( $edit['pass'.trim($list[lid])] == '' )
            $password = $subscrip[lpass];
        else
            $password = $edit['pass'.trim($list[lid])];
        $edit['pass'.trim($list[lid])] = ''; // See http://api.drupal.org/api/4.7/function/hook_user
	    if ($subscrip[lstatus] != $edit[$listno]) {
	      _mailman_manager_update_subscriptions($account->uid,$list[lid],$edit[$listno],
		    $subscrip[lstatus],$account->mail,$password);   
	    }
      }
    return t('Your mailing list subscriptions have been updated');  
    }
  }
}

/**
 * Menu callback; displays the mailing list overview/editing page.
 */
function mailman_manager_admin() {
  $edit = $_POST;
  $op = $edit['op'];

  if ($op == t('Add list')) {
	drupal_set_message(_mailman_manager_admin_save($edit));
  }
  else if ($op == t('Delete checked lists')) {
	drupal_set_message(_mailman_manager_admin_delete($edit));
  }
  print theme('page', _mailman_manager_admin_display());
}

/**
 * Prepare the mailing list admin form.
 */
function _mailman_manager_admin_display() {
  $output = '<div class="mailman_manager">';
  $lists = _mailman_manager_get_lists();
  if (count($lists) == 0) {
    $output .= '<p>'.t('There are no lists available for subscription.<table><tr>');
  } else {
    $output .= '<p>'.t('The following lists are available for subscription.<table><tr>');
	$output .= '<th width = 10%>ID</th>';
	$output .= '<th width = 30%>Name</th>';
	$output .= '<th width = 50%>Request Address</th>';
	$output .= '<th width = 10%>Delete?</th></tr>';
    $output .= drupal_get_form('mailman_manager_edit_lists_form',$lists);
  }
  $output .= '</tr></table></div>';
  $output .= drupal_get_form('mailman_manager_add_list_form');
  return $output;  
}

function mailman_manager_edit_lists_form($lists) {
  foreach ($lists as $list) {
    $form['del'.$list[lid]] = array(
	  '#prefix' => '<tr><td>'.$list[lid].'</td><td>'.$list[name].'</td><td>'.$list[command].'</td><td>',
	  '#type' => 'checkbox',
	  '#default_value' => 0,
      '#suffix' => '</td></tr>'
	);
  }
  $form['Submit'] = array(
    '#prefix' => '<tr><td colspan=4>',
  	'#type' => 'submit',
	'#value' => 'Delete checked lists',
	'#suffix' => '</td></tr>'
  );
  return $form;
}

function mailman_manager_add_list_form() {
  $form['add_name'] = array (
  	'#title' => 'Enter list name',
  	'#type' => 'textfield',
  );
  $form['reqaddress'] = array (
  	'#title' => 'Enter list \'request\' address (commands are sent here)',
  	'#type' => 'textfield',
  );
  $form['adminaddress'] = array (
  	'#title' => 'Enter list \'admin\' address (Optional. admin is used for BCC)',
  	'#type' => 'textfield',
  );
  $form['webaddress'] = array (
  	'#title' => 'Enter list web address for users (http://...). Leave empty if hidden.',
  	'#type' => 'textfield',
  );
  $form['webarchive'] = array (
  	'#title' => 'Enter list web archive address for users (http://...). Leave empty if hidden.',
  	'#type' => 'textfield',
  );
  $form['Submit'] = array (
  	'#type' => 'submit',
	'#value' => 'Add list',
  );
  return $form;
}

/**
 * Save new mailing list.
 */
function _mailman_manager_admin_save($edit) {
  $name = trim($edit['add_name']);
  $command = trim($edit['reqaddress']);
  $admin = trim($edit['adminaddress']);  
  $web = trim($edit['webaddress']);  
  $webarch = trim($edit['webarchive']);  
  $query = "INSERT INTO {mailman_lists} (name,command,admin,web,webarch) VALUES ('%s', '%s', '%s', '%s', '%s')";
  if (db_query($query,$name,$command,$admin,$web,$webarch)){
    $watchdog = 'New Mailman list '.$name.' successfully created';
	watchdog('mailman man', $watchdog, 'WATCHDOG_NOTICE', NULL);
    return t('The mailing lists have been updated.');
  } else {
    $watchdog = 'Error in creating new Mailman list '.$name;
	watchdog('mailman man', $watchdog, 'WATCHDOG_ERROR', NULL);
    return t('Error creating mailing list.');
  }  
}

/**
 * Delete a mailing list.
 */
function _mailman_manager_admin_delete($edit) {
  $lists = _mailman_manager_get_lists();
  $listcount=0;
  foreach($lists as $list) {
    $delete=$edit['del'.$list[lid]];
	if ($delete) {
	  $query = "DELETE FROM {mailman_lists} WHERE lid = %d";
	  if (db_query($query,$list[lid])) {
        $watchdog = 'Successfully deleted Mailman list '.$list[lid];
		watchdog('mailman man', $watchdog, 'WATCHDOG_ERROR', NULL);
		$listcount++;
	  } else {
        $watchdog = 'Error in deleting Mailman list '.$list[lid];
		watchdog('mailman man', $watchdog, 'WATCHDOG_ERROR', NULL);
      }    	  
	}
  }
  return t('Successfully deleted '.$listcount.' mailing list(s).');	    
}

/**
 * Return array of objects of current mailing lists.
 */
function _mailman_manager_get_lists() {
  $result = db_query("SELECT * FROM {mailman_lists}");
  while ($list = db_fetch_array($result)){
    $lists[]=$list;
  }
return $lists;
}

/**
 * Return array of user's subscriptions to mailing lists.
 */
function _mailman_manager_get_subscriptions($uid,$lid) {
  $query = "SELECT * FROM {mailman_users} WHERE uid = %d AND lid = %d";
  $result = db_query($query,$uid,$lid);
  //If there are no entries for this user then set subscriptions to zero;
  //and return no mail button option for display;
  if (mysql_num_rows($result) == 0) {
    $query = "INSERT INTO {mailman_users} (uid,lid,lstatus) VALUES (%d, %d, %d)";
    db_query($query,$uid,$lid,0);
    $subscrip = array (
      uid => $uid,
      lid => $lid,
      lstatus => 0
    );
  } else {
 	$subscrip=db_fetch_array($result);
  }
return $subscrip;
}

/**
 * Update user's subscriptions to mailing lists.
 */
function _mailman_manager_update_subscriptions($uid,$lid,$lstatus,$oldstatus,$mail,$password) {
    // Do not update status for 'mail password':
    if ( $lstatus != 4 ) {
        $query = "UPDATE {mailman_users} SET lstatus = %d WHERE uid = %d AND lid = %d";
        db_query($query,$lstatus,$uid,$lid);
    }
  switch ($lstatus) {

  // Unsubscribe selected;
  case 0:
    $command = "unsubscribe ".$password." address=".$mail;
    _mailman_manager_setdelivery($uid, $lid, $mail, $command);	
    $watchdog = 'User '.$uid.' unsuibscribed from list '.$lid;
    watchdog('mailman man', $watchdog, 'WATCHDOG_NOTICE', NULL);
  break;
    

  // No email selected;
  case 1:
    $command = "set authenticate ".$password." address=".$mail."\n";
    $command .= "set delivery off"; 
    _mailman_manager_setdelivery($uid, $lid, $mail, $command);	
    $watchdog = 'Subscription to list '.$lid.' for user '.$uid.' changed to no mail';
    watchdog('mailman man', $watchdog, 'WATCHDOG_NOTICE', NULL);
  break;
	
  //Digest selected;
  case 2: 
	if ($oldstatus == 0) {
	  _mailman_manager_subscribe($uid, $lid, $mail, 'digest', $password);
	} else {
      $command = "set authenticate ".$password." address=".$mail."\n";
      $command .= "set delivery on\n"; 
      $command .= "set digest plain"; 
      _mailman_manager_setdelivery($uid,$lid,$mail,$command);	
      $watchdog = 'Subscription to list '.$lid.' for user '.$uid.' changed to digest';
      watchdog('mailman man', $watchdog, 'WATCHDOG_NOTICE', NULL);
    } 	 
  break;	   

  //All mail selected;
  case 3: 
	if ($oldstatus == 0) {
	  _mailman_manager_subscribe($uid, $lid, $mail, 'nodigest', $password);
	} else {
      $command = "set authenticate ".$password." address=".$mail."\n";
      $command .= "set delivery on\n"; 
      $command .= "set digest off"; 
	  _mailman_manager_setdelivery($uid,$lid,$mail,$command);
      $watchdog = 'Subscription to list '.$lid.' for user '.$uid.' changed to all mail';
      watchdog('mailman man', $watchdog, 'WATCHDOG_NOTICE', NULL);
	}
  break;
	
  //mail pwd selected;
  case 4: 
	if ($oldstatus == 0) {
        return;
	} else {
      $command = "password address=".$mail."\n";
	  _mailman_manager_setdelivery($uid,$lid,$mail,$command);
      $watchdog = 'Password for list '.$lid.' for user '.$uid.' sent by mail';
      watchdog('mailman man', $watchdog, 'WATCHDOG_NOTICE', NULL);
	}
  break;
	
  }
  return;
}

/**
 * Create a new subscription by sending request email to Mailman.
 */
function _mailman_manager_subscribe($uid, $lid, $mail, $digest, $password){
  $query = "SELECT * FROM {mailman_lists} WHERE lid = %d";
  $result = db_query($query,$lid);
  $list = db_fetch_array($result);
  $commandaddress = $list[command];
  $adminaddress = $list[admin];
  if ( $password == "" ) {
      $password = _mailman_manager_rand_str(5);
      $password .= trim($uid).substr($mail,0,1);
  }
  $command = "subscribe ".$password." ".$digest." address=".trim($mail);
  $headers = "";
  // If the adminaddress was given, use BCC
  $headers .= "From: ". variable_get('site_mail', ini_get('sendmail_from')) ."\n";
  if ( $adminaddress != "" ) {
      $headers .= "Bcc: ".$adminaddress."\n";
  } else {
  }
  mail($commandaddress,'',$command,$headers);
  $query = "UPDATE {mailman_users} SET lmail = '%s', lpass = '%s' WHERE uid = %d AND lid = %d";
  if (db_query($query,$mail,$password,$uid,$lid)){
    $watchdog = 'New subscription to list '.$lid.' for user '.$uid.' completed successfully.';
	watchdog('mailman man', $watchdog, 'WATCHDOG_NOTICE', NULL);
  } else {
    $watchdog = 'New subscription to list '.$lid.' for user '.$uid.' failed.';
	watchdog('mailman man', $watchdog, 'WATCHDOG_ERROR', NULL);
  }	  
  return; 
}

/**
 * Update settings for a subscription by sending request email to Mailman.
 */
function _mailman_manager_setdelivery($uid, $lid, $mail, $command) {
  $query = "SELECT * FROM {mailman_lists} WHERE lid = %d";
  $result = db_query($query, $lid);
  $list = db_fetch_array($result);
  $commandaddress = $list[command];
  $adminaddress = $list[admin];
  $headers = "From: ". variable_get('site_mail', ini_get('sendmail_from')) ."\n";
  if ( $adminaddress != "" )
      $headers .= "Bcc: ".$adminaddress."\n";
  $watchdog = 'Mail command sent to Mailman to: '. $commandaddress.' Command: '.$command;
  watchdog('mailman man', $watchdog, 'WATCHDOG_NOTICE', NULL);
  mail($commandaddress,'',$command,$headers);
  return; 
}

/**
 * Generation of five character random text string for Mailman password.
 */
function _mailman_manager_rand_str($size)
{
   $feed = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
   for ($i=0; $i < $size; $i++)
   {
       $rand_str .= substr($feed, rand(0, strlen($feed)-1), 1);
   }
   return $rand_str;
}

?>